@page "/"


<div class="card">
    <div class="card-header">
        <h5>Blogentry Creator</h5>
    </div>
    <div class="card-body">
        <h5>Vorschau:</h5>
        <div>
            <h5>@_content.Title</h5>
            @foreach (var part in _content.ContentParts)
            {
                if (part.Type == Lib.Enums.ContentType.MarkDownText)
                {
                    <Entry>@((MarkupString)Markdown.ToHtml(part.Content))</Entry>
                }
                else
                {
                    <Entry>
                        @part.Content
                    </Entry>
                }
            }
        </div>
        <form>
            <input type="text" @bind-value="_content.Title" />
            @foreach (var part in _content.ContentParts)
            {
                <div>
                    <div class="btn-group dropend">
                        <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="oi oi-wrench"></span>
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (ContentType item in Enum.GetValues(typeof(ContentType)))
                            {
                            <li><button @onclick="(e)=>part.Type = item">@item.ToString()</button></li>
                            }
                        </ul>
                    </div>
                    <input type="text" @bind-value="part.Content" @onkeydown="(e)=>AddLine(e,part)" />
                </div>
            }
            <button @onclick="AddPart"></button>

        </form>
    </div>
    <div class="card-footer">
        <Download Filename="@($"{_content.Id}.json")" ToDownload="@_content" />
        <button @onclick="GenerateContentlist">Generate ContentList</button>
        @if (_generated)
        {
            <Download Filename="@($"ContentList.json")" ToDownload="@_indexEntryModel" />
        }
    </div>
</div>

@code {
    ContentModel _content = new();
    IndexEntryModel _indexEntryModel = new();
    bool _generated = false;


    void GenerateContentlist()
    {
        _indexEntryModel = new(_content);
        _generated = true;
    }
    void AddLine(KeyboardEventArgs e, ContentPart part)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            part.Lines++;
        }

    }
    void AddPart()
    {
        List<ContentPart> tempParts = new(_content.ContentParts.Length + 1);
        tempParts.AddRange(_content.ContentParts);
        ContentPart part = new();
        part.Lines = 2;
        tempParts.Add(part);
        _content.ContentParts = tempParts.ToArray();
    }
}
